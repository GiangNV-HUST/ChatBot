import streamlit as st
import logging
import traceback
from rag_chatbot import RAGChatbotSystem

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


def setup_streamlit_ui():
    st.set_page_config(page_title="RAG Chatbot", page_icon="ü§ñ", layout="wide")
    st.title("ü§ñ RAG Chatbot v·ªõi LangChain v√† FAISS Vector Database")

    with st.spinner("ƒêang ki·ªÉm tra h·ªá th·ªëng..."):
        if "chatbot" not in st.session_state:
            st.write("Kh·ªüi t·∫°o chatbot...")
            try:
                st.session_state.chatbot = RAGChatbotSystem()
                st.success("Chatbot ƒë√£ s·∫µn s√†ng!")
            except Exception as e:
                st.error(f"L·ªói kh·ªüi t·∫°o chatbot: {str(e)}")
                return

    with st.sidebar:
        st.header("‚öôÔ∏è C·∫•u h√¨nh")

        # T·∫£i l√™n t√†i li·ªáu
        st.subheader("T·∫£i l√™n t√†i li·ªáu")
        uploaded_files = st.file_uploader(
            "Ch·ªçn file ƒë·ªÉ t·∫£i l√™n:",
            accept_multiple_files=True,
            type=["pdf", "docx", "txt", "csv", "xlsx", "xls"],
        )

        save_option = st.checkbox("L∆∞u file v√†o th∆∞ m·ª•c d·ªØ li·ªáu", value=True)

        if st.button("X·ª≠ l√Ω file ƒë√£ t·∫£i l√™n"):
            if uploaded_files:
                total_success = 0
                for uploaded_file in uploaded_files:
                    with st.spinner(f"ƒêang x·ª≠ l√Ω {uploaded_file.name}..."):
                        success, message = (
                            st.session_state.chatbot.add_uploaded_document(
                                uploaded_file, save_to_data_dir=save_option
                            )
                        )
                        if success:
                            st.success(message)
                            total_success += 1
                        else:
                            st.error(message)

                if total_success > 0:
                    st.success(
                        f"ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng {total_success}/{len(uploaded_files)} file"
                    )
            else:
                st.warning("Vui l√≤ng t·∫£i l√™n √≠t nh·∫•t m·ªôt file")

        # Th√™m t√†i li·ªáu t·ª´ web
        st.subheader("Th√™m t√†i li·ªáu t·ª´ web")
        url = st.text_input("Nh·∫≠p URL:", key="url_input")
        if st.button("Th√™m URL"):
            if url:
                with st.spinner(f"ƒêang t·∫£i d·ªØ li·ªáu t·ª´ {url}..."):
                    success, message = st.session_state.chatbot.add_web_document(url)
                    if success:
                        st.success(message)
                    else:
                        st.error(message)
            else:
                st.warning("Vui l√≤ng nh·∫≠p URL")

        # Qu·∫£n l√Ω h·ªôi tho·∫°i
        st.subheader("Qu·∫£n l√Ω h·ªôi tho·∫°i")
        if st.button("X√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i"):
            st.session_state.chatbot.clear_memory()
            st.session_state.messages = [
                {"role": "assistant", "content": "Xin ch√†o! H·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨."}
            ]
            st.success("ƒê√£ x√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i")

        # Qu·∫£n l√Ω d·ªØ li·ªáu
        st.subheader("Qu·∫£n l√Ω d·ªØ li·ªáu")
        if st.button("T·∫£i l·∫°i d·ªØ li·ªáu"):
            with st.spinner("ƒêang t·∫£i l·∫°i d·ªØ li·ªáu..."):
                st.session_state.chatbot._setup_system()
                st.session_state.chatbot._setup_chain()
            st.success("ƒê√£ t·∫£i l·∫°i d·ªØ li·ªáu th√†nh c√¥ng")

        # Th√¥ng tin h·ªá th·ªëng
        st.subheader("Th√¥ng tin h·ªá th·ªëng")
        st.info(
            """
            **M√¥ h√¨nh s·ª≠ d·ª•ng:**
            - Embedding: all-MiniLM-L6-v2
            - LLM: Vinallama-7B-Chat
            - Vector DB: FAISS
            
            **ƒê·ªãnh d·∫°ng h·ªó tr·ª£:**
            - PDF (.pdf)
            - Word (.docx)
            - Text (.txt)
            - CSV (.csv)
            - Excel (.xlsx, .xls)
            """
        )

    # Kh·ªüi t·∫°o l·ªãch s·ª≠ h·ªôi tho·∫°i
    if "messages" not in st.session_state:
        st.session_state.messages = [
            {"role": "assistant", "content": "Xin ch√†o! H·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨."}
        ]

    # Hi·ªÉn th·ªã l·ªãch s·ª≠ h·ªôi tho·∫°i
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
            if message.get("sources"):
                st.markdown("**Ngu·ªìn:**")
                for source in message["sources"]:
                    st.markdown(f"- {source}")

    # X·ª≠ l√Ω input t·ª´ ng∆∞·ªùi d√πng
    if prompt := st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."):
        # Th√™m tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)
        
        # X·ª≠ l√Ω v√† hi·ªÉn th·ªã ph·∫£n h·ªìi
        with st.chat_message("assistant"):
            with st.spinner("ƒêang suy nghƒ©..."):
                response = st.session_state.chatbot.chat(prompt)
                st.markdown(response["answer"])
                if response["sources"]:
                    st.markdown("**Ngu·ªìn:**")
                    for source in response["sources"]:
                        st.markdown(f"- {source}")
                
                # Th√™m ph·∫£n h·ªìi v√†o l·ªãch s·ª≠
                st.session_state.messages.append(
                    {
                        "role": "assistant",
                        "content": response["answer"],
                        "sources": response["sources"],
                    }
                )


def main():
    try:
        setup_streamlit_ui()
    except Exception as e:
        st.error(f"L·ªói khi ch·∫°y ·ª©ng d·ª•ng: {str(e)}")
        st.error(traceback.format_exc())
        logger.error(f"L·ªói ·ª©ng d·ª•ng: {e}")


if __name__ == "__main__":
    main()